<?php

namespace Drupal\ejikznayka\Plugin\Field\FieldFormatter;

use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;

/**
 * Plugin implementation of the 'ejikznayka_scenario_play' formatter.
 *
 * @FieldFormatter(
 *   id = "ejikznayka_scenario_play",
 *   label = @Translation("Play scenario"),
 *   field_types = {
 *     "ejikznayka_scenario"
 *   }
 * )
 */
class ScenarioPlayFormatter extends FormatterBase {

  /**
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface $items, $langcode) {
    $elements = [];
    /** @var \Drupal\Core\TypedData\Plugin\DataType\ItemList $items */
    foreach ($items as $delta => $item) {
      $js_config = [
        'count' => $item->count,
        'interval' => $item->display_settings['interval'],
        'minus' => $item->display_settings['minus'],
        'keep' => ($item->display_settings['column'] == 'single' ? FALSE : $item->display_settings['keep']),
        'random_location' => $item->display_settings['random_location'],
//        'mark' => $config['mark'],
        'column' => $item->display_settings['column'],
        'font_size' => $item->display_settings['font_size'],
      ];
      $elements[$delta] = [
        '#theme' => 'ejikznayka_play_formatter',
        '#attached' => [
          'drupalSettings' => [
            'ejikznayka' => [
              'field--name-' . Html::getClass($items->getName()) => [
                $delta => [
                  'options' => $js_config,
                  'sequence' => $item->sequence,
                  'positions' => $item->positions,
                ],
              ],
            ],
          ],
        ],
      ];
      foreach (['correct_emoticon', 'incorrect_emoticon', 'correct_audio', 'incorrect_audio'] as $file_key) {
        if (!empty($this->getSetting($file_key))) {
          $file = File::load($this->getSetting($file_key)[0]);
          $elements[$delta]['#' . $file_key] = isset($file) ? $file->url() : '';
        }
      }
    }
    return $elements;
  }

  /**
   * {@inheritdoc}
   */
  public static function defaultSettings() {
    return [
      'correct_audio' => NULL,
      'incorrect_audio' => NULL,
      'correct_emoticon' => NULL,
      'incorrect_emoticon' => NULL,
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function settingsForm(array $form, FormStateInterface $form_state) {
    $form = parent::settingsForm($form, $form_state);
    $icon_array = array(
      '#type' => 'managed_file',
      '#multiple' => FALSE,
      '#upload_location' => 'public://ejikznayka',
      '#upload_validators' => array(
        'file_validate_extensions' => array('png', 'gif', 'jpg', 'jpeg'),
        'file_validate_is image' => array(),
        'file_validate_image_resolution' => array('257x257', '16x16'),
        'file_validate_size' => array(102400),
      ),
    );

    $form['correct_emoticon'] = array(
      '#title' => $this->t('Smiley for correct answer'),
      '#default_value' => $this->getSetting('correct_emoticon'),
    ) + $icon_array;

    $form['incorrect_emoticon'] = array(
      '#title' => $this->t('Smiley for incorrect answer'),
      '#default_value' => $this->getSetting('incorrect_emoticon'),
    ) + $icon_array;

    $audio_array = array(
      '#type' => 'managed_file',
      '#multiple' => FALSE,
      '#upload_location' => 'public://ejikznayka',
      '#description' => $this->t('Audio file in mp3 format.'),
      '#upload_validators' => array(
        'file_validate_extensions' => array('mp3'),
        'file_validate_size' => array(102400),
      ),
    );

    $form['correct_audio'] = array(
      '#title' => $this->t('Audio for correct answer'),
      '#default_value' => $this->getSetting('correct_audio'),
    ) + $audio_array;

    $form['incorrect_audio'] = array(
      '#title' => $this->t('Audio for incorrect answer'),
      '#default_value' => $this->getSetting('incorrect_audio'),
    ) + $audio_array;

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function settingsSummary() {
    return parent::settingsSummary(); // TODO: Change the autogenerated stub
  }


}