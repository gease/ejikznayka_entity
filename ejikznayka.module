<?php

/**
 * @file
 *
 * Contains hooks implementations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see ejikznayka_entity_view_display_edit_submit().
 */
function ejikznayka_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  foreach ($form_state->getBuildInfo()['callback_object']->getEntity()->get('fieldDefinitions') as $field_definition) {
    if ($field_definition->getType() == 'ejikznayka_scenario') {
      // We put our callback first.
      // If we put it last, entity would be saved already.
      array_unshift($form['actions']['submit']['#submit'], 'ejikznayka_entity_view_display_edit_submit');
      return;
    }
  }
}

/**
 * Callback for submitting entity view edit form.
 * We need to set files permanent.
 * No way to do this in any field classes, because entity handles form save.
 * @TODO At this moment, we don't care about re-use of files.
 * @TODO File::loadMultiple().
 */
function ejikznayka_entity_view_display_edit_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $entity */
  $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
  $content_original = \Drupal::entityTypeManager()
    ->getStorage($entity->getEntityTypeId())
    ->load($entity->getOriginalId())
    ->get('content');

  $file_usage = \Drupal::service('file.usage');

  foreach ($form_state->getBuildInfo()['callback_object']->getEntity()->get('content') as $field_name => $field) {
    if ($field['type'] == 'ejikznayka_scenario_play'
      || $content_original[$field_name]['type'] == 'ejikznayka_scenario_play') {
      // Case 1. Widget changed to 'ejikznayka_scenario_play'.
      if ($content_original[$field_name]['type'] != 'ejikznayka_scenario_play') {
        // Set all files permanent.
        foreach ($field['settings'] as $setting) {
          foreach ($setting as $fid) {
            $file = File::load($fid);
            $file->setPermanent();
            $file_usage->add($file, 'ejikznayka', $entity->getEntityTypeId(), $entity->getOriginalId());
            $file->save();
          }
        }
      }
      // Case 2. Widget changed from 'ejikznayka_scenario_play'.
      elseif ($field['type'] != 'ejikznayka_scenario_play') {
        // Delete all files.
        foreach ($content_original[$field_name]['settings'] as $setting) {
          foreach ($setting as $fid) {
            $file = File::load($fid);
            // We call ::delete() directly because it takes care of usage.
            $file->delete();
          }
        }
      }
      // Case 3. Widget was and is 'ejikznayka_scenario_play',
      // settings have changed.
      else {
        $settings_original = $content_original[$field_name]['settings'];
        foreach ($field['settings'] as $key => $setting) {
          // We find added files.
          $diff = array_diff($setting, $settings_original[$key]);
          // And fix them.
          foreach ($diff as $fid) {
            $file = File::load($fid);
            $file->setPermanent();
            $file_usage->add($file, 'ejikznayka', $entity->getEntityTypeId(), $entity->getOriginalId());
            $file->save();
          }
          // Then find removed files.
          $diff = array_diff($settings_original[$key], $setting);
          // And fix them.
          foreach ($diff as $fid) {
            $file = File::load($fid);
            $file->delete();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function ejikznayka_theme($existing, $type, $theme, $path) {
  return [
    'ejikznayka_play_formatter' => [
      'template' => 'ejikznayka_play_formatter',
      'variables' => [
        'correct_emoticon' => NULL,
        'incorrect_emoticon' => NULL,
        'correct_audio' => NULL,
        'incorrect_audio' => NULL,
      ],
    ],
    'ejikznayka_lesson_add_list' => [
      'variables' => ['content' => NULL],
    ],
  ];
}

/**
 * Prepares variables for list of available lesson type templates.
 *
 * Default template: ejikznayka-lesson-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of lesson types.
 *
 */
function template_preprocess_ejikznayka_lesson_add_list(&$variables) {
  $variables['types'] = [];
  if (!empty($variables['content'])) {
    /** @var \Drupal\ejikznayka\Entity\LessonType $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()] = [
        'type' => $type->id(),
        'add_link' => \Drupal::l($type->label(), new Url('entity.ejikznayka_lesson.add_form', ['ejikznayka_lesson_type' => $type->id()])),
        'description' => [
          '#markup' => $type->getDescription(),
        ],
      ];
    }
  }
}
